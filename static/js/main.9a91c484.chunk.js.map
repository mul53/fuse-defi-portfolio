{"version":3,"sources":["components/pool.js","graphql/client.js","graphql/queries.js","hooks/useProvider.js","hooks/useLiquidityPools.js","context/tokensContext.js","hooks/useMulticall.js","hooks/useContract.js","constants/index.js","hooks/useTokenBalances.js","pages/account/Overview.js","hooks/useNativeBalance.js","App.js","reportWebVitals.js","index.js"],"names":["Pool","pool","pair","token0","symbol","token1","share","liquidityTokenBalance","liquidityTokenBalanceUSD","fuseswapClient","ApolloClient","link","HttpLink","uri","cache","InMemoryCache","getTokenPrices","tokens","a","query","gql","map","v","toLowerCase","join","result","data","bundle","account","liquidityPositions","useProvider","useMemo","ethers","providers","JsonRpcProvider","useLiquidityPools","useState","pools","setPools","provider","useEffect","getLiquidityPools","then","totalSupply","reserveUSD","Context","createContext","axios","get","response","filter","token","type","getCoingeckoQuotes","foreignAddress","address","usd","reduce","prev","next","getFuseswapQuotes","id","derivedETH","ethPrice","coingecko","fuseswap","TokensProvider","children","setTokens","quotes","setQuotes","getTokens","length","getQuotes","value","Provider","useTokensContext","useContext","useMultipleContractMultiCall","addresses","abi","methodName","setResult","contract","Contract","useContract","MULTICALL_ABI","contractInterface","Interface","fragment","getFunction","callData","encodeFunctionData","undefined","calls","aggregate","parsedResults","decodeFunctionResult","useTokenBalances","status","bridgedTokens","useTokens","tokenAddresses","tokenQuotes","results","ERC20_ABI","tokenAddress","idx","find","balanceWei","balanceFormatted","formatUnits","decimals","balance","balanceUSD","tokenBalance","AccountOverview","nativeBalance","setBalance","getBalance","toString","formatEther","useNativeBalance","tokenBalances","total","setTotal","tokenBalancesTotal","App","setAddress","className","onSubmit","e","preventDefault","target","name","placeholder","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a91c484.chunk.js","sourcesContent":["export default function Pool({ pool }) {\n  return (\n    <li>\n      <div>\n        Fuseswap {pool.pair.token0.symbol}/{pool.pair.token1.symbol} Pool{' '}\n        {pool.share * 100}%\n      </div>\n      <div>{pool.liquidityTokenBalance} UNI-V2</div>\n      <div>${pool.liquidityTokenBalanceUSD}</div>\n    </li>\n  )\n}\n","import { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'\n\nexport const fuseswapClient = new ApolloClient({\n    link: new HttpLink({\n        uri: 'https://api.thegraph.com/subgraphs/name/fuseio/fuseswap',\n    }),\n    cache: new InMemoryCache()\n})\n","import gql from \"graphql-tag\"\nimport { fuseswapClient } from \"./client\"\n\nexport async function getTokenPrices(tokens) {\n    const query = gql(`\n        query {\n            tokens(where: {\n                id_in: [${tokens.map(v => `\"${v.toLowerCase()}\"`).join(',')}]\n            }) {\n                id\n                name\n                symbol\n                decimals\n                derivedETH\n            }\n            bundle(id: \"1\") {\n                ethPrice\n            }\n        }\n    `)\n    \n\n    const result = await fuseswapClient.query({ query })\n\n    return {\n        tokens: result?.data?.tokens,\n        bundle: result?.data?.bundle\n    }\n}\n\nexport async function getLiquidityPools(account) {\n    const query = gql(`\n        query {\n            liquidityPositions(where: { \n                user: \"${account.toLowerCase()}\",\n                liquidityTokenBalance_gt: \"0\"\n            }) {\n                liquidityTokenBalance\n                pair {\n                    id\n                    reserve0\n                    reserve1\n                    token0 {\n                        id\n                        decimals\n                        name\n                        symbol\n                    }\n                    token1 {\n                        id\n                        decimals\n                        name\n                        symbol\n                    }\n                    totalSupply\n                    reserveUSD\n                }\n            }\n        }\n    `)\n\n    const result = await fuseswapClient.query({ query })\n    return result?.data?.liquidityPositions\n}\n","import { useMemo } from 'react'\nimport { ethers } from 'ethers'\n\nexport default function useProvider() {\n    return useMemo(() => \n        new ethers.providers.JsonRpcProvider('https://rpc.fuse.io'), []\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport { getLiquidityPools } from \"../graphql/queries\";\nimport useProvider from \"./useProvider\";\n\nexport default function useLiquidityPools(account) {\n    const [pools, setPools] = useState([])\n    const provider = useProvider()\n\n    useEffect(() => {\n        if (account) {\n            getLiquidityPools(account)\n                .then(pools => {\n                    const result = pools.map(pool => {\n                        const share = pool.liquidityTokenBalance / pool.pair.totalSupply\n                        const liquidityTokenBalanceUSD = share * pool.pair.reserveUSD\n                        return {\n                            ...pool,\n                            share,\n                            liquidityTokenBalanceUSD\n                        }\n                    })\n                    setPools(result)\n                })\n        }\n    }, [account, provider])\n\n    return pools\n}\n","import { createContext, useContext, useEffect, useState, useMemo } from 'react'\nimport axios from 'axios'\nimport { getTokenPrices } from '../graphql/queries'\n\nconst Context = createContext({})\n\nasync function getTokens() {\n  const response = await axios.get('https://service.fuseswap.com/api/v1/tokens')\n  return response.data.data.tokens.filter((token) => token.type === 'bridged')\n}\n\nasync function getCoingeckoQuotes(tokens) {\n  const response = await axios.get(\n    `https://api.coingecko.com/api/v3/simple/token_price/ethereum?contract_addresses=${tokens\n      .map((token) => token.foreignAddress)\n      .join(',')}&vs_currencies=usd`,\n  )\n\n  return tokens\n    .map((token) => ({\n      address: token.address,\n      usd: response.data[token.foreignAddress]\n        ? response.data[token.foreignAddress].usd\n        : 0,\n    }))\n    .reduce((prev, next) => {\n      prev[next.address] = next.usd\n      return prev\n    }, {})\n}\n\nasync function getFuseswapQuotes() {\n  const response = await getTokenPrices([\n    '0x0be9e53fd7edac9f859882afdda116645287c629',\n    '0x249be57637d8b013ad64785404b24aebae9b098b',\n  ])\n\n  return response.tokens\n    .map((token) => ({\n      address: token.id,\n      usd: token.derivedETH * response.bundle.ethPrice,\n    }))\n    .reduce((prev, next) => {\n      prev[next.address] = next.usd\n      return prev\n    }, {})\n}\n\nasync function getQuotes(tokens) {\n  const coingecko = await getCoingeckoQuotes(tokens)\n  const fuseswap = await getFuseswapQuotes()\n  return {\n    ...coingecko,\n    ...fuseswap,\n  }\n}\n\nexport function TokensProvider({ children }) {\n  const [tokens, setTokens] = useState([])\n  const [quotes, setQuotes] = useState(null)\n\n  useEffect(() => {\n    getTokens().then(setTokens)\n  }, [])\n\n  useEffect(() => {\n    if (tokens.length) {\n      getQuotes(tokens).then(setQuotes)\n    }\n  }, [tokens])\n\n  const value = useMemo(() => ({ tokens, quotes }), [quotes, tokens])\n\n  return <Context.Provider value={value}>{children}</Context.Provider>\n}\n\nexport function useTokensContext() {\n  const context = useContext(Context)\n  return context\n}\n","import { Interface } from \"@ethersproject/abi\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { MULTICALL_ADDRESS } from \"../constants\";\nimport MULTICALL_ABI from \"../constants/abis/multicall.json\";\nimport useContract from \"./useContract\";\n\nexport function useMultipleContractMultiCall(addresses, abi, methodName, data) {\n    const [result, setResult] = useState(null)\n    const contract = useContract(MULTICALL_ADDRESS, MULTICALL_ABI)\n    const contractInterface = useMemo(() => new Interface(abi), [abi]) \n    const fragment = useMemo(() => contractInterface.getFunction(methodName), [contractInterface, methodName])\n    const callData = useMemo(() => fragment && data[0].length ? contractInterface.encodeFunctionData(fragment, data) : undefined, [contractInterface, data, fragment])\n    const calls = useMemo(() => fragment && addresses && addresses.length > 0 && callData \n        ? addresses.map(address => {\n            return  address && callData \n                ? [\n                    address,\n                    callData\n                ]\n                : undefined\n        })\n        : [],\n    [addresses, callData, fragment])\n\n    useEffect(() => {\n        contract.aggregate(calls)\n            .then(data => {\n                const [, results] = data\n                const parsedResults = results.map(result => {\n                    if (result !== '0x') {\n                        return contractInterface.decodeFunctionResult(fragment, result)\n                    }\n                    return undefined\n                })\n                setResult(parsedResults)\n            })\n    }, [calls])\n\n    return result\n}\n","import { ethers } from \"ethers\"\nimport useProvider from \"./useProvider\"\n\nexport default function useContract(address, abi) {\n    const provider = useProvider()\n    return new ethers.Contract(address, abi, provider)\n}\n","export const MULTICALL_ADDRESS = '0x3CE6158b7278Bf6792e014FA7B4f3c6c46fe9410'\n","import { useEffect, useState, useMemo, useCallback } from 'react'\nimport { useMultipleContractMultiCall } from './useMulticall'\nimport ERC20_ABI from '../constants/abis/erc20.json'\nimport axios from 'axios'\nimport useTokenQuotes from './useTokenQuotes'\nimport { formatUnits } from '@ethersproject/units'\nimport { useTokensContext } from '../context/tokensContext'\n\nexport function useTokens() {\n  const [tokens, setTokens] = useState([])\n\n  useEffect(() => {\n    axios\n      .get('https://service.fuseswap.com/api/v1/tokens')\n      .then(response => {\n        if (response.status === 200) {\n          const bridgedTokens = response.data.data.tokens.filter(\n            (token) => token.type === 'bridged' || token.type === 'misc',\n          )\n          setTokens(bridgedTokens)\n        }\n      })\n  }, [])\n\n  return tokens\n}\n\nexport default function useTokenBalances(account) {\n  const tokens = useTokens()\n  const tokenAddresses = useMemo(() => tokens.map(token => token.address), [tokens]) \n  const { quotes: tokenQuotes } = useTokensContext()\n\n  const results = useMultipleContractMultiCall(\n    tokenAddresses,\n    ERC20_ABI,\n    'balanceOf',\n    [account],\n  )\n\n  const tokenBalances = useMemo(() => {\n      if (results && results.length && tokens.length && tokenQuotes) {\n        return tokenAddresses.map((tokenAddress, idx) => {\n            const token = tokens.find(v => v.address.toLowerCase() === tokenAddress.toLowerCase())\n            const balanceWei = results[idx][0]\n            const balanceFormatted = formatUnits(balanceWei, token.decimals)\n            const balanceUSD = tokenQuotes[tokenAddress.toLowerCase()] * balanceFormatted\n            return { \n                token, \n                balance: balanceFormatted,\n                balanceUSD: balanceUSD\n            }\n        }).filter(tokenBalance => tokenBalance.balance > 0)\n      }\n\n      return []\n  }, [results, tokenAddresses, tokenQuotes, tokens])\n\n  return tokenBalances\n}\n","import { useEffect, useState } from 'react'\nimport Pool from '../../components/pool'\nimport useLiquidityPools from '../../hooks/useLiquidityPools'\nimport useNativeBalance from '../../hooks/useNativeBalance'\nimport useTokenBalances from '../../hooks/useTokenBalances'\n\nfunction AccountOverview({ account }) {\n  const nativeBalance = useNativeBalance(account)\n  const tokenBalances = useTokenBalances(account)\n  const pools = useLiquidityPools(account)\n  const [total, setTotal] = useState(0)\n\n  useEffect(() => {\n    const tokenBalancesTotal =\n      nativeBalance.balanceUSD +\n      tokenBalances.reduce((prev, next) => prev + next.balanceUSD, 0) +\n      pools.reduce((prev, next) => prev + next.liquidityTokenBalanceUSD, 0)\n    setTotal(tokenBalancesTotal)\n  }, [nativeBalance.balanceUSD, pools, tokenBalances])\n\n  return (\n    <div>\n      <h2>AccountOverview: {account}</h2>\n      <h2>Porfolio Value: ${total}</h2>\n      <div>\n        <h3>Assets</h3>\n        <ul>\n          <li>\n            <div>Fuse</div>\n            <div>{nativeBalance.balance}</div>\n            <div>${nativeBalance.balanceUSD}</div>\n          </li>\n          {tokenBalances.map((tokenBalance) => (\n            <li>\n              <div>{tokenBalance.token.symbol}</div>\n              <div>{tokenBalance.balance}</div>\n              <div>${tokenBalance.balanceUSD}</div>\n            </li>\n          ))}\n        </ul>\n        <h3>Liquidity Pools</h3>\n        <ul>\n          {pools.map((pool) => (\n            <Pool pool={pool} />\n          ))}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default AccountOverview\n","import { formatEther } from '@ethersproject/units'\nimport { useEffect, useState } from 'react'\nimport { useTokensContext } from '../context/tokensContext'\nimport useProvider from './useProvider'\n\nexport default function useNativeBalance(account) {\n  const [balance, setBalance] = useState('0')\n  const provider = useProvider()\n  const { quotes } = useTokensContext()\n\n  useEffect(() => {\n    if (account) {\n      provider.getBalance(account).then((data) => setBalance(data.toString()))\n    }\n  }, [account, provider])\n\n  return {\n    balance: formatEther(balance),\n    balanceUSD:\n      quotes && quotes['0x0be9e53fd7edac9f859882afdda116645287c629']\n        ? quotes['0x0be9e53fd7edac9f859882afdda116645287c629'] *\n          formatEther(balance)\n        : 0,\n  }\n}\n","import { useState } from \"react\";\nimport AccountOverview from \"./pages/account/Overview\";\n\nfunction App() {\n  const [address, setAddress] = useState('')\n\n  const onSubmit = (e) => {\n    e.preventDefault()\n    \n    if (e.target.address.value) {\n      setAddress(e.target.address.value)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <form onSubmit={onSubmit}>\n          <input name=\"address\" type=\"text\" placeholder=\"Enter address\"/>\n          <button>Submit</button>\n        </form>\n      </header>\n      <AccountOverview account={address} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { TokensProvider } from './context/tokensContext';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TokensProvider>\n      <App />\n    </TokensProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}